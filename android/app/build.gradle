apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

ext.appVersionCode = 1
ext.appVersionName = "0.9.0"
ext.appReleaseDir = ""

def loadProperties() {
   // def proFile = file("../local.properties")
   //     Properties p = new Properties()
   //     proFile.withInputStream { stream->
   //         p.load(stream)
   //     }
   // appReleaseDir = p.appReleaseDir
        //    appVersionCode = Integer.valueOf(p.appVersionCode)
        //    appVersionName = p.appVersionName
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

loadProperties()

android {
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    compileSdkVersion 25

    buildToolsVersion '25.0.2'
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    defaultConfig {
        multiDexEnabled true
        applicationId "com.vidahouse.vidaeasy"
        manifestPlaceholders = [
            JPUSH_APPKEY: "65c6207eb4f4f170b8cccebe",
            APP_CHANNEL: "developer-default"
        ]
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "0.5.0"
        ndk {
            //设置支持的SO库架构
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        vectorDrawables.useSupportLibrary = true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = ['src/main/res']
        }
    }
    signingConfigs {
        debug {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'armeabi'
            universalApk true
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release

        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'x86': 3]
            def abi = output.getFilter(OutputFile.ABI)
            def file = output.name
            if (output.name.equals('armeabi-v7aRelease')) {
                def releaseApkName = 'vidahouse_release_' + getDate() + '.apk'
                //  output.outputFile = new File(appReleaseDir, releaseApkName)
            }
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    productFlavors {
    }

    useLibrary 'org.apache.http.legacy'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}


configurations {
    all*.exclude module: 'jsr305'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':ReactNativeLocalization')
    compile 'com.facebook.react:react-native:+'
    compile(name: "xwalk_core_library-18.48.477.13", ext: "aar")
    compile project(':CrosswalkWebView')
    compile project(':RCTWeChat')
    compile project(':react-native-camera')
    compile project(':react-native-smart-swipe-refresh-layout')
    compile project(':react-native-image-picker')
    compile project(':react-native-orientation')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-device-info')
    compile project(':react-native-video')
    compile project(':jpush-react-native')
    compile project(':jcore-react-native')
    compile project(':react-native-view-shot')
    compile 'com.facebook.fresco:animated-gif:0.13.0'
    compile project(':react-native-image-crop-picker')
    compile files('libs/universal-image-loader-1.9.4.jar')
    compile files('libs/butterknife-7.0.1.jar')
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:support-v4:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.netease.nimlib:basesdk:4.1.0'
    compile 'com.netease.nimlib:avchat:4.1.0'

    compile 'jp.wasabeef:glide-transformations:2.0.2'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.android.support:support-v4:25.3.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0'

    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    // JSON Parsing
    compile 'com.google.code.gson:gson:2.6.1'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
